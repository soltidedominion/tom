// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eHpbU2NKNJKD7NPDAZmhpB
// Component: WxyZShd1cxwA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Video } from "@plasmicpkgs/plasmic-basic-components";
import { PlasmicHead } from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: eHpbU2NKNJKD7NPDAZmhpB/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: WxyZShd1cxwA/css

import TwitterSvgrepoComSvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComSvg"; // plasmic-import: tRY6kou_NdG2/icon
import TelegramSvgrepoComSvgIcon from "./icons/PlasmicIcon__TelegramSvgrepoComSvg"; // plasmic-import: odGFXMcf3OrA/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  columns?: Flex__<"div">;
  htmlVideo?: Flex__<typeof Video>;
  h1?: Flex__<"h1">;
  freeBox?: Flex__<"div">;
  pageMetadataOverride?: Flex__<typeof PlasmicHead>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__nq0Jg)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__t00Ji)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/tombear/images/tombearPng.png",
                    fullWidth: 541,
                    fullHeight: 961,
                    aspectRatio: undefined
                  }}
                />

                <Video
                  data-plasmic-name={"htmlVideo"}
                  data-plasmic-override={overrides.htmlVideo}
                  className={classNames("__wab_instance", sty.htmlVideo)}
                  controls={true}
                  loop={true}
                  muted={true}
                  poster={"/plasmic/tombear/images/tombearPng.png"}
                  src={
                    "https://scontent.cdninstagram.com/o1/v/t16/f2/m69/AQMaKmKHevCNR1Gyzd8ucriX_h-FNGYycVF4jbm9rXu2iJU92DaxoSr9uvlJeUmG78jG9ABueK89K98IrPEdz5EF.mp4?efg=eyJ2ZW5jb2RlX3RhZyI6Inhwdl9wcm9ncmVzc2l2ZS5JTlNUQUdSQU0uQ0xJUFMuQzMuNTQwLmRhc2hfYmFzZWxpbmVfMl92MSJ9&_nc_ht=instagram.fdps2-1.fna.fbcdn.net&_nc_cat=107&strext=1&vs=681081df3c3b451b&_nc_vs=HBksFQIYOnBhc3N0aHJvdWdoX2V2ZXJzdG9yZS9HSGF5UWdlNlJqVjE1ekFEQUdVUUZ1allySHNyYnBSMUFBQUYVAALIAQAVAhg6cGFzc3Rocm91Z2hfZXZlcnN0b3JlL0dGSXFNQnNndW1oRnY2c0RBSWNMUlppS3dnRjZicV9FQUFBRhUCAsgBACgAGAAbAogHdXNlX29pbAExEnByb2dyZXNzaXZlX3JlY2lwZQExFQAAJqq7pY6qze4BFQIoAkMzLBdANsVgQYk3TBgSZGFzaF9iYXNlbGluZV8yX3YxEQB1_gcA&ccb=9-4&oh=00_AYCGHNCy-Tv1G6GvBdUqRkl4d5T_MCTNMNrZvoJPFiUWvw&oe=67006850&_nc_sid=1d576d"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__ahaoU)}>
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Wellcom To \nTOM BEAR"}
                </h1>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__zbNla
                  )}
                >
                  {"The Viral Russian Grizzly Bear on Youtube and Instagram"}
                </h4>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4___0NbMo
                  )}
                >
                  {"CA : "}
                </h4>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__dkMZp
                    )}
                    component={Link}
                    href={"https://x.com/TomBearCTO"}
                    platform={"nextjs"}
                  >
                    <TwitterSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__founh)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__xZle
                    )}
                    component={Link}
                    href={"https://t.me/+KtHO0PZdcEYyYTNl"}
                    platform={"nextjs"}
                  >
                    <TelegramSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg___5DbHt)}
                      role={"img"}
                    />
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__fhDq0
                    )}
                    component={Link}
                    href={
                      "https://pump.fun/ADFq9RMBMqLYUPLB4hQDRGsgNBbKSe7EAGm86iJgpump"
                    }
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__aHe1Z)}
                      displayHeight={"52px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"52px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/tombear/images/pumpfuniconJpeg.jpg",
                        fullWidth: 225,
                        fullHeight: 225,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                </Stack__>
              </div>
            </div>
          </section>
          <PlasmicHead
            data-plasmic-name={"pageMetadataOverride"}
            data-plasmic-override={overrides.pageMetadataOverride}
            className={classNames("__wab_instance", sty.pageMetadataOverride)}
            description={
              "The Viral Russian Grizzly Bear on Youtube and Instagram"
            }
            image={"/plasmic/tombear/images/tombearJpg.jpg"}
            title={"Tom Bear | Solana"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "columns",
    "htmlVideo",
    "h1",
    "freeBox",
    "pageMetadataOverride"
  ],
  section: ["section", "columns", "htmlVideo", "h1", "freeBox"],
  columns: ["columns", "htmlVideo", "h1", "freeBox"],
  htmlVideo: ["htmlVideo"],
  h1: ["h1"],
  freeBox: ["freeBox"],
  pageMetadataOverride: ["pageMetadataOverride"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  columns: "div";
  htmlVideo: typeof Video;
  h1: "h1";
  freeBox: "div";
  pageMetadataOverride: typeof PlasmicHead;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    pageMetadataOverride: makeNodeComponent("pageMetadataOverride"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
